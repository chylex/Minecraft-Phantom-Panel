@using Phantom.Server.Services.Users
@using Phantom.Server.Database.Entities
@using Phantom.Server.Services.Audit
@using System.ComponentModel.DataAnnotations
@using Phantom.Utils.Tasks
@inherits PhantomComponent
@inject IJSRuntime Js;
@inject UserManager UserManager
@inject AuditLog AuditLog

<Form Model="form" OnSubmit="AddUser">
  <Modal Id="@ModalId" TitleText="Add User">
    <Body>
      
      <div class="row">
        <div class="mb-3">
          <FormTextInput Id="account-username" Label="Username" @bind-Value="form.Username" autocomplete="off" />
        </div>
      </div>

      <div class="row">
        <div class="mb-3">
          <FormTextInput Id="account-password" Label="Password" Type="FormTextInputType.Password" autocomplete="new-password" @bind-Value="form.Password" />
        </div>
      </div>
      
    </Body>
    <Footer>
      <FormSubmitError />
      <FormButtonSubmit Label="Add User" class="btn btn-primary" />
      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
    </Footer>
  </Modal>
</Form>

@code {

  [Parameter, EditorRequired]
  public string ModalId { get; set; } = string.Empty;
  
  [Parameter]
  public EventCallback<UserEntity> UserAdded { get; set; }

  private readonly AddUserFormModel form = new();

  private sealed class AddUserFormModel : FormModel {
    [Required]
    public string Username { get; set; } = string.Empty;

    [Required]
    public string Password { get; set; } = string.Empty;
  }

  private async Task AddUser(EditContext context) {
    await form.SubmitModel.StartSubmitting();

    if (!await CheckPermission(Permission.EditUsers)) {
      form.SubmitModel.StopSubmitting("You do not have permission to add users.");
      return;
    }

    switch (await UserManager.CreateUser(form.Username, form.Password)) {
      case Result<UserEntity, AddUserError>.Ok ok:
        await AuditLog.AddUserCreatedEvent(ok.Value);
        await UserAdded.InvokeAsync(ok.Value);
        await Js.InvokeVoidAsync("closeModal", ModalId);
        form.SubmitModel.StopSubmitting();
        break;
        
      case Result<UserEntity, AddUserError>.Fail fail:
        form.SubmitModel.StopSubmitting(fail.Error.ToSentences("\n"));
        break;
    }
  }

}
