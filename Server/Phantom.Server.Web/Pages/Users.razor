@page "/users"
@using System.Collections.Immutable
@using Microsoft.AspNetCore.Identity
@using Phantom.Server.Services.Users
@attribute [Authorize(Permission.ViewUsersPolicy)]
@inject UserManager<IdentityUser> UserManager
@inject IdentityLookup IdentityLookup

<h1>Users</h1>

<PermissionView Permission="Permission.EditUsers">
  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add-user">Add User...</button>
</PermissionView>

<table class="table align-middle">
  <thead>
    <tr>
      <Column Width="315px">Identifier</Column>
      <Column Width="125px; 40%">Username</Column>
      <Column Width="125px; 60%">Roles</Column>
      <PermissionView Permission="Permission.EditUsers">
        <Column Width="100px">Actions</Column>
      </PermissionView>
    </tr>
  </thead>
  <tbody>
    @foreach (var user in allUsers) {
      <tr>
        <td>
          <code class="text-uppercase">@user.Id</code>
        </td>
        <td>@user.UserName</td>
        <td>@(userRoles.TryGetValue(user.Id, out var roles) ? roles : "-")</td>
        <PermissionView Permission="Permission.EditUsers">
          <td>
            @if (IdentityLookup.GetAuthenticatedUserId(context.User) != user.Id) {
              <button class="btn btn-danger btn-sm" @onclick="() => userDeleteDialog.Show(user)">Delete...</button>
            }
          </td>
        </PermissionView>
      </tr>
    }
  </tbody>
</table>

<PermissionView Permission="Permission.EditUsers">
  <UserAddDialog ModalId="add-user" UserAdded="OnUserAdded" />
  <UserDeleteDialog @ref="userDeleteDialog" ModalId="delete-user" UserDeleted="OnUserDeleted" />
</PermissionView>

@code {

  private ImmutableArray<IdentityUser> allUsers = ImmutableArray<IdentityUser>.Empty;
  private ImmutableDictionary<string, string> userRoles = ImmutableDictionary<string, string>.Empty;

  private UserDeleteDialog userDeleteDialog = null!;

  protected override void OnInitialized() {
    allUsers = UserManager.Users.ToImmutableArray();
  }

  protected override async Task OnInitializedAsync() {
    var userRolesBuilder = ImmutableDictionary.CreateBuilder<string, string>();

    foreach (var user in allUsers) {
      var roles = await UserManager.GetRolesAsync(user);
      if (roles.Count > 0) {
        userRolesBuilder.Add(user.Id, string.Join(", ", roles));
      }
    }

    userRoles = userRolesBuilder.ToImmutable();
  }

  private void OnUserAdded(IdentityUser user) {
    allUsers = allUsers.Add(user);
  }

  private void OnUserDeleted(IdentityUser user) {
    allUsers = allUsers.Remove(user);
  }

}
