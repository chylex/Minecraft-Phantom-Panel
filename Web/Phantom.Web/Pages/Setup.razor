@page "/setup"
@using Phantom.Controller.Services.Users
@using Phantom.Utils.Cryptography
@using Phantom.Utils.Tasks
@using Phantom.Controller.Database.Entities
@using Phantom.Controller.Services
@using Phantom.Controller.Services.Audit
@using Phantom.Web.Identity.Authentication
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@attribute [AllowAnonymous]
@inject ServiceConfiguration ServiceConfiguration
@inject PhantomLoginManager LoginManager
@inject UserManager UserManager
@inject RoleManager RoleManager
@inject UserRoleManager UserRoleManager
@inject AuditLog AuditLog

<h1>Administrator Setup</h1>

<Form Model="form" OnSubmit="DoLogin">
  <div style="max-width: 400px;">
    <div class="row">
      <div class="mb-3">
        <FormTextInput Id="account-username" Label="Username" @bind-Value="form.Username" autocomplete="off" />
      </div>
    </div>

    <div class="row">
      <div class="mb-3">
        <FormTextInput Id="account-password" Label="Password" Type="FormTextInputType.Password" @bind-Value="form.Password" autocomplete="new-password" />
      </div>
    </div>

    <div class="row">
      <div class="mb-3">
        <FormTextInput Id="administration-token" Label="Administration Token" Type="FormTextInputType.Password" @bind-Value="form.AdministrationToken" autocomplete="off" />
      </div>
    </div>

    <FormButtonSubmit Label="Continue" class="btn btn-primary" />
  </div>

  <FormSubmitError />
</Form>

@code {

  private readonly CreateAdministratorAccountFormModel form = new();

  private sealed class CreateAdministratorAccountFormModel : FormModel {
    [Required]
    public string Username { get; set; } = string.Empty;

    [Required]
    public string Password { get; set; } = string.Empty;

    [Required]
    public string AdministrationToken { get; set; } = string.Empty;
  }

  private async Task DoLogin(EditContext context) {
    await form.SubmitModel.StartSubmitting();

    if (!IsAdministratorTokenValid()) {
      form.SubmitModel.StopSubmitting("Invalid administrator token.");
      return;
    }

    if (await CreateOrUpdateAdministrator() is Result<string>.Fail fail) {
      form.SubmitModel.StopSubmitting(fail.Error);
      return;
    }

    var signInResult = await LoginManager.SignIn(form.Username, form.Password);
    if (!signInResult) {
      form.SubmitModel.StopSubmitting("Error logging in.");
    }
  }

  private bool IsAdministratorTokenValid() {
    byte[] formTokenBytes;
    try {
      formTokenBytes = TokenGenerator.GetBytesOrThrow(form.AdministrationToken);
    } catch (Exception) {
      return false;
    }

    return CryptographicOperations.FixedTimeEquals(formTokenBytes, ServiceConfiguration.AdministratorToken);
  }

  private async Task<Result<string>> CreateOrUpdateAdministrator() {
    var existingUser = await UserManager.GetByName(form.Username);
    return existingUser == null ? await CreateAdministrator() : await UpdateAdministrator(existingUser);
  }

  private async Task<Result<string>> CreateAdministrator() {
    var administratorRole = await RoleManager.GetByGuid(Role.Administrator.Guid);
    if (administratorRole == null) {
      return Result.Fail("Administrator role not found.");
    }

    switch (await UserManager.CreateUser(form.Username, form.Password)) {
      case Result<UserEntity, AddUserError>.Ok ok:
        var administratorUser = ok.Value;
        await AuditLog.AddAdministratorUserCreatedEvent(administratorUser);

        if (!await UserRoleManager.Add(administratorUser, administratorRole)) {
          return Result.Fail("Could not assign administrator role to user.");
        }

        return Result.Ok<string>();

      case Result<UserEntity, AddUserError>.Fail fail:
        return Result.Fail(fail.Error.ToSentences("\n"));
    }

    return Result.Fail("Unknown error.");
  }

  private async Task<Result<string>> UpdateAdministrator(UserEntity existingUser) {
    switch (await UserManager.SetUserPassword(existingUser.UserGuid, form.Password)) {
      case Result<SetUserPasswordError>.Ok:
        await AuditLog.AddAdministratorUserModifiedEvent(existingUser);
        return Result.Ok<string>();

      case Result<SetUserPasswordError>.Fail fail:
        return Result.Fail(fail.Error.ToSentences("\n"));
    }

    return Result.Fail("Unknown error.");
  }

}
