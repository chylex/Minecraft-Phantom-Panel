@page "/events"
@attribute [Authorize(Permission.ViewEventsPolicy)]
@using System.Collections.Immutable
@using Phantom.Common.Data.Web.EventLog
@using Phantom.Common.Data.Web.Users
@using Phantom.Web.Services.Agents
@using Phantom.Web.Services.Events
@using Phantom.Web.Services.Instances
@inherits Phantom.Web.Components.PhantomComponent
@inject AgentManager AgentManager
@inject EventLogManager EventLogManager
@inject InstanceManager InstanceManager

<h1>Event Log</h1>

<table class="table">
  <thead>
    <tr>
      <Column Width="165px" Class="text-end">Time</Column>
      <Column Width="320px; 20%">Agent</Column>
      <Column Width="160px">Event Type</Column>
      <Column Width="320px; 20%">Subject</Column>
      <Column Width="100px; 60%">Data</Column>
    </tr>
  </thead>
  <tbody>
    @foreach (var logItem in logItems) {
      DateTimeOffset time = logItem.UtcTime.ToLocalTime();
      <tr>
        <td class="text-end">
          <time datetime="@time.ToString("o")">@time.ToString()</time>
        </td>
        <td>
          @if (logItem.AgentGuid is {} agentGuid) {
            @(GetAgentName(agentGuid))
            <br>
            <code class="text-uppercase">@agentGuid</code>
          }
          else {
            <text>-</text>
          }
        </td>
        <td>@logItem.EventType.ToNiceString()</td>
        <td>
          @if (GetSubjectName(logItem.SubjectType, logItem.SubjectId) is {} subjectName) {
            @subjectName
            <br>
          }
          <code class="text-uppercase">@logItem.SubjectId</code>
        </td>
        <td>
          <code>@logItem.JsonData</code>
        </td>
      </tr>
    }
  </tbody>
</table>

@code {

  private CancellationTokenSource? initializationCancellationTokenSource;
  private ImmutableArray<EventLogItem> logItems = ImmutableArray<EventLogItem>.Empty;
  private ImmutableDictionary<Guid, string> agentNamesByGuid = ImmutableDictionary<Guid, string>.Empty;
  private ImmutableDictionary<Guid, string> instanceNamesByGuid = ImmutableDictionary<Guid, string>.Empty;

  protected override async Task OnInitializedAsync() {
    initializationCancellationTokenSource = new CancellationTokenSource();
    var cancellationToken = initializationCancellationTokenSource.Token;

    try {
      logItems = await EventLogManager.GetMostRecentItems(50, cancellationToken);
      agentNamesByGuid = AgentManager.GetAll().ToImmutableDictionary(static kvp => kvp.Guid, static kvp => kvp.Name);
      instanceNamesByGuid = InstanceManager.GetAll().Values.ToImmutableDictionary(static instance => instance.Configuration.InstanceGuid, static instance => instance.Configuration.InstanceName);
    } finally {
      initializationCancellationTokenSource.Dispose();
    }
  }

  private string GetAgentName(Guid agentGuid) {
    return agentNamesByGuid.TryGetValue(agentGuid, out var name) ? name : "?";
  }

  private string? GetSubjectName(EventLogSubjectType type, string id) {
    return type switch {
           EventLogSubjectType.Instance => instanceNamesByGuid.TryGetValue(Guid.Parse(id), out var name) ? name : null,
           _                            => null
    };
  }

  protected override void OnDisposed() {
    try {
      initializationCancellationTokenSource?.Cancel();
    } catch (ObjectDisposedException) {}
  }

}
