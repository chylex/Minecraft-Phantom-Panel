@using Phantom.Server.Database.Entities
@using Phantom.Server.Services.Audit
@using Phantom.Server.Services.Users
@inherits UserEditDialogBase
@inject UserManager UserManager
@inject RoleManager RoleManager
@inject UserRoleManager UserRoleManager
@inject AuditLog AuditLog

<Modal Id="@ModalId" TitleText="Manage User Roles">
  <Body>
    Roles for user: <strong class="fw-semibold">@EditedUserName</strong><br>
    @for (var index = 0; index < items.Count; index++) {
      var item = items[index];
      <div class="mt-1">
        <input id="role-@index" type="checkbox" class="form-check-input" @bind="@item.Checked" />
        <label for="role-@index" class="form-check-label">@item.Role.Name</label>
      </div>
    }
  </Body>
  <Footer>
    <FormSubmitError Model="SubmitModel" />
    <FormButtonSubmit Model="SubmitModel" Label="Save Roles" type="button" class="btn btn-success" @onclick="Submit" />
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="OnClosed">Cancel</button>
  </Footer>
</Modal>

@code {

  private List<RoleItem> items = new();

  protected override async Task BeforeShown(UserEntity user) {
    var userRoles = await UserRoleManager.GetUserRoleGuids(user);
    var allRoles = await RoleManager.GetAll();
    this.items = allRoles.Select(role => new RoleItem(role, userRoles.Contains(role.RoleGuid))).ToList();
  }

  protected override async Task DoEdit(UserEntity user) {
    var userRoles = await UserRoleManager.GetUserRoleGuids(user);
    var addedToRoles = new List<string>();
    var removedFromRoles = new List<string>();
    var errors = new List<string>();

    foreach (var item in items) {
      var shouldHaveRole = item.Checked;
      if (shouldHaveRole == userRoles.Contains(item.Role.RoleGuid)) {
        continue;
      }

      bool success = shouldHaveRole ? await UserRoleManager.Add(user, item.Role) : await UserRoleManager.Remove(user, item.Role);
      if (success) {
          var modifiedList = shouldHaveRole ? addedToRoles : removedFromRoles;
          modifiedList.Add(item.Role.Name);
      }
      else if (shouldHaveRole) {
        errors.Add("Could not add role " + item.Role.Name + " to user.");
      }
      else {
        errors.Add("Could not remove role " + item.Role.Name + " from user.");
      }
    }

    if (errors.Count == 0) {
      await AuditLog.AddUserRolesChangedEvent(user, addedToRoles, removedFromRoles);
      await OnEditSuccess();
    }
    else {
      OnEditFailure(string.Join("\n", errors));
    }
  }

  private sealed class RoleItem {
    public RoleEntity Role { get; }
    public bool Checked { get; set; }

    public RoleItem(RoleEntity role, bool @checked) {
      this.Role = role;
      this.Checked = @checked;
    }
  }

}
